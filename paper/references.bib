@article{actor,
 author = {Agha, Gul A. and Mason, Ian A. and Smith, Scott F. and Talcott, Carolyn L.},
 title = {A Foundation for Actor Computation},
 journal = {J. Funct. Program.},
 issue_date = {January 1997},
 volume = {7},
 number = {1},
 month = jan,
 year = {1997},
 issn = {0956-7968},
 pages = {1--72},
 numpages = {72},
 url = {http://dx.doi.org/10.1017/S095679689700261X},
 doi = {10.1017/S095679689700261X},
 acmid = {969901},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA},
}

@article{kframework,
  title={An Overview of the {K} Semantic Framework},
  author={Grigore Ro{\c s}u and Traian Florin {\c S}erb{\u a}nu{\c t}{\u a} },
  journal={Journal of Logic and Algebraic Programming},
  volume={79},
  number={6},
  pages={397--434},
  year={2010},
  ee={http://dx.doi.org/10.1016/j.jlap.2010.03.012},
  doi={10.1016/j.jlap.2010.03.012},
}

@inproceedings{kc,
    author = "Hathhorn, Chris and Ellison, Chucky and Ro\c{s}u, Grigore",
    publisher = "ACM",
    doi = "http://dx.doi.org/10.1145/2813885.2737979",
    title = "Defining the Undefinedness of C",
    booktitle = "Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'15)",
    month = "June",
    year = "2015",
    pages = "336-345"
}

@inproceedings{kjava,
    author = "Bogd\u{a}na\c{s}, Denis and Ro\c{s}u, Grigore",
    publisher = "ACM",
    doi = "http://dx.doi.org/10.1145/2676726.2676982",
    title = "{K-Java: A Complete Semantics of Java}",
    booktitle = "Proceedings of the 42nd Symposium on Principles of Programming Languages (POPL'15)",
    month = "January",
    year = "2015",
    pages = "445-456"
}

@inproceedings{kjs,
    author = "Park, Daejun and \c{S}tef\u{a}nescu, Andrei and Ro\c{s}u, Grigore",
    publisher = "ACM",
    doi = "http://dx.doi.org/10.1145/2737924.2737991",
    title = "{KJS}: A Complete Formal Semantics of {JavaScript}",
    booktitle = "Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'15)",
    month = "June",
    year = "2015",
    pages = "346-356"
}

@book{erlang,
 author = {Cesarini, Francesco and Thompson, Simon},
 title = {ERLANG Programming},
 year = {2009},
 isbn = {0596518188, 9780596518189},
 edition = {1st},
 publisher = {O'Reilly Media, Inc.},
}

@book{akka,
 author = {Wyatt, Derek},
 title = {Akka Concurrency},
 year = {2013},
 isbn = {0981531660, 9780981531663},
 publisher = {Artima Incorporation},
 address = {USA},
}

@book{scheme,
 author = {Dybvig, R. Kent},
 title = {The  Scheme Programming Language: ANSI Scheme},
 year = {1996},
 isbn = {0134546466},
 edition = {2nd},
 publisher = {Prentice Hall PTR},
 address = {Upper Saddle River, NJ, USA},
}

@Inbook{orc,
author="Kitchin, David
and Quark, Adrian
and Cook, William
and Misra, Jayadev",
editor="Lee, David
and Lopes, Ant{\'o}nia
and Poetzsch-Heffter, Arnd",
title="The Orc Programming Language",
bookTitle="Formal Techniques for Distributed Systems: Joint 11th IFIP WG 6.1 International Conference FMOODS 2009 and 29th IFIP WG 6.1 International Conference FORTE 2009, Lisboa, Portugal, June 9-12, 2009. Proceedings",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--25",
abstract="Orc was originally presented as a process calculus. It has now evolved into a full programming language, which we describe in this paper. The language has the structure and feel of a functional programming language, yet it handles many non-functional aspects effectively, including spawning of concurrent threads, time-outs and mutable state. We first describe the original concurrency combinators of the process calculus. Next we describe a small functional programming language that forms the core language. Then we show how the concurrency combinators of the process calculus and the functional core language are integrated seamlessly. The resulting language and its supporting libraries have proven very effective in describing typical concurrent computations; we demonstrate how several practical concurrent programming problems are easily solved in Orc.",
isbn="978-3-642-02138-1",
doi="10.1007/978-3-642-02138-1_1",
url="https://doi.org/10.1007/978-3-642-02138-1_1"
}

@Inbook{reachabilitylogic,
author="{\c{S}}tef{\u{a}}nescu, Andrei
and Ciob{\^a}c{\u{a}}, {\c{S}}tefan
and Mereuta, Radu
and Moore, Brandon M.
and {\c{S}}erb{\u{a}}nut{\u{a}}, Traian Florin
and Ro{\c{s}}u, Grigore",
editor="Dowek, Gilles",
title="All-Path Reachability Logic",
bookTitle="Rewriting and Typed Lambda Calculi: Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014, Vienna, Austria, July 14-17, 2014. Proceedings",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="425--440",
abstract="This paper presents a language-independent proof system for reachability properties of programs written in non-deterministic (e.g. concurrent) languages, referred to as all-path reachability logic. It derives partial-correctness properties with all-path semantics (a state satisfying a given precondition reaches states satisfying a given postcondition on all terminating execution paths). The proof system takes as axioms any unconditional operational semantics, and is sound (partially correct) and (relatively) complete, independent of the object language; the soundness has also been mechanized (Coq). This approach is implemented in a tool for semantics-based verification as part of the                                                                   {\$}{\backslash}mathbb K{\$}               framework.",
isbn="978-3-319-08918-8",
doi="10.1007/978-3-319-08918-8_29",
url="https://doi.org/10.1007/978-3-319-08918-8_29"
}
