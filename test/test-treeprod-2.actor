let(bind(sink,
  rec(lambda(b, lambda(m, become(b))))),
let(bind(ident,
  lambda(m, m)),
let(bind(joincont,
  rec(lambda(b, lambda(c, lambda(nargs, lambda(firstnum, lambda(num,
    if(eq?(nargs, 0),
       become(app(app(app(b, c), 1), num)),
       seq(become(sink),
           send(c, mult(firstnum, num))))))))))),
let(bind(treeprod,
  rec(lambda(b, lambda(self, lambda(m,
    seq(become(app(b, self)),
        if(isnat(tree(m)),
           send(cust(m), tree(m)),
           let(bind(ltree, left(tree(m))),
           let(bind(rtree, right(tree(m))),
             letactor(bind(newcust, app(app(app(joincont, cust(m)), 0), nil)),
               if(or(isnat(ltree), isnat(rtree)),
                  send(cust(m), mult(app(app(b, self), ltree), app(app(b, self), rtree))),
                  seq(send(self, pr(left(tree(m)), newcust)),
                      send(self, pr(right(tree(m)), newcust)))))))))))))),
let(bind(tr, 
  pr(pr(1, pr(2, pr(3, 4))), pr(pr(5, 6), 7))),
letactor(
  bind(tpactor, app(treeprod, tpactor)),
  bind(custactor, ident),
  send(tpactor, pr(tr, custactor))))))))

